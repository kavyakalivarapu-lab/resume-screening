# -*- coding: utf-8 -*-
"""resume_matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kf8iRSKUgq2uidpTpBae3hoCX9i_IO8y
"""

#!pip install numpy pandas torch transformers sentence-transformers PyMuPDF scikit-learn streamlit

import os
import fitz  # PyMuPDF for extracting text from PDFs
import numpy as np
import torch
from sentence_transformers import SentenceTransformer, util
import streamlit as st
import tempfile

# Load pre-trained SBERT model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    """Extracts text from a PDF file."""
    text = ""
    try:
        with fitz.open(pdf_path) as doc:
            for page in doc:
                text += page.get_text("text") + "\n"
    except Exception as e:
        st.error(f"Error reading {pdf_path}: {e}")
    return text.strip()

# Function to rank resumes based on similarity to job description
def rank_resumes(resume_texts, job_description):
    """Ranks resumes by similarity to the job description using BERT embeddings."""
    job_embedding = model.encode(job_description, convert_to_tensor=True)

    scores = []
    for resume_text in resume_texts:
        resume_embedding = model.encode(resume_text, convert_to_tensor=True)
        similarity = util.pytorch_cos_sim(job_embedding, resume_embedding)
        scores.append(similarity.item())

    ranked_resumes = sorted(zip(resume_texts, scores), key=lambda x: x[1], reverse=True)
    return ranked_resumes

# Streamlit Web App
st.title("üìù BERT-Powered Resume Matching")

# Upload job description
job_description = st.text_area("Enter Job Description:", "Looking for a Data Scientist with experience in Python, NLP, and Deep Learning.")

# Upload resumes
uploaded_files = st.file_uploader("Upload Resume PDFs", accept_multiple_files=True, type=["pdf"])

if uploaded_files and job_description:
    resume_texts = []
    for uploaded_file in uploaded_files:
        # Save uploaded file to temp storage
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
            temp_file.write(uploaded_file.read())
            temp_path = temp_file.name
        # Extract text
        resume_texts.append(extract_text_from_pdf(temp_path))
        os.remove(temp_path)  # Cleanup temp file

    # Rank resumes
    ranked_resumes = rank_resumes(resume_texts, job_description)

    # Display results
    st.subheader("üìå Ranked Resumes")
    for i, (resume_text, score) in enumerate(ranked_resumes):
        st.write(f"**Rank {i+1}: Similarity Score: {score:.4f}**")
        st.text_area(f"Resume {i+1} Preview", resume_text[:500])  # Show first 500 chars

